{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js","components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useMarvelService","_apiBase","_apiKey","getAllCharacters","a","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComic","getComic","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","comic","title","pages","pageCount","language","textObjects","prices","price","ErrorBoundary","state","errorInfo","console","log","this","setState","props","children","Component","View","length","slice","clazz","className","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","window","addEventListener","onScroll","removeEventListener","initial","onCharListLoaded","pageYOffset","document","documentElement","clientHeight","scrollHeight","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","imgStyle","tabIndex","ref","el","onSelectedChar","onKeyDown","e","key","renderItems","disabled","Skeleton","to","resourceURI","match","CharInfo","charId","skeleton","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/3.f36b0c65.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'/>\n    );\n}\n\nexport default ErrorMessage;","import { useState, useCallback } from \"react\";\n\nconst useHttp = () => {\n    const [loading, setLoading] = useState(false),\n          [error, setError] = useState(null),\n          request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n            setLoading(true);\n\n            try {\n                const response = await fetch(url, {method, body, headers});\n\n                if (!response.ok) {\n                    throw new Error(`Could not fetch ${url}, status ${response.status}`);\n                }\n\n                const data = await response.json();\n\n                setLoading(false);\n\n                return data;\n            } catch (err) {\n                setLoading(false);\n                setError(err.message);\n                throw err;\n            }\n          }, []);\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, error, request, clearError};\n};\n\nexport default useHttp;","import useHttp from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, error, request, clearError} = useHttp(),\n          _apiBase = 'https://gateway.marvel.com:443/v1/public/',\n          _apiKey = 'apikey=5c02a0353f46ffbe06fcfc4be6d97d44',\n          _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComic);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComic(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        };\n    }\n\n    const _transformComic = (comic) => {\n        return {\n            id: comic.id,\n            title: comic.title,\n            description: comic.description,\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\n            pages: comic.pageCount,\n            language: comic.textObjects[0] ? comic.textObjects[0].language : null,\n            prices: comic.prices.price\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic};\n} \n\nexport default useMarvelService;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({error: true});\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/mjolnir.1f86f2d3.png\";","import { useState, useEffect } from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport useMarvelService from '../../services/MarvelService';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState(null),\n          {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id).then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null,\n          spinner = loading && !error ? <Spinner/> : null,\n          content = !(error || loading || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    );\n}\n\nconst View = ({char}) => {\n    const {name, homepage, wiki} = char;\n    let {description, thumbnail} = char;\n    if (description.length === 0) {\n        description = 'No description';\n    } else if (description.length > 30) {\n        description = description.slice(0, 200) + '...';\n    }\n    let clazz = 'randomchar__img';\n    thumbnail = thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif' ? 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' : thumbnail;\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') clazz = 'randomchar__not_img';\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className={clazz}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useCallback} from 'react';\nimport PropTypes from 'prop-types'\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]),\n          [newItemLoading, setNewItemLoading] = useState(true),\n          [offset, setOffset] = useState(210),\n          [charEnded, setCharEnded] = useState(false),\n          {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    useEffect(() => {\n        if(!charEnded && !newItemLoading) {\n            window.addEventListener('scroll', onScroll);\n        }\n\n        return () => window.removeEventListener('scroll', onScroll);\n    })\n\n    const onRequest = (offset, initial) => { \n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset).then(onCharListLoaded);\n    }\n\n    const onScroll = useCallback(() => {\n        if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {\n            onRequest(offset, false);\n        }\n    })\n\n    const onCharListLoaded = (newCharList) => { \n        let ended = false; \n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]); \n        setNewItemLoading(false); \n        setOffset(offset => offset + newCharList.length); \n        setCharEnded(ended); \n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            item.thumbnail = item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif' ? 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' : item.thumbnail;\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                className='char__item'\n                tabIndex={0}\n                ref={el => itemRefs.current[i] = el}\n                key={item.id}\n                onClick={() => {\n                    props.onSelectedChar(item.id);\n                    focusOnItem(i);\n                }}\n                onKeyDown={(e) => {\n                    if (e.key === ' ' || e.key === \"Enter\") {\n                        props.onSelectedChar(item.id);\n                        focusOnItem(i);\n                    }\n                }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList),\n          errorMessage = error ? <ErrorMessage/> : null,\n          spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onSelectedChar: PropTypes.func\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport Skeleton from '../skeleton/Skeleton'\nimport useMarvelService from '../../services/MarvelService';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null),\n          {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        \n        if (props.charId !== props.charId) {\n            updateChar();\n        }\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId).then(onCharLoaded);\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n    \n    const skeleton = char || error || loading ? null : <Skeleton/>,\n          errorMessage = error ? <ErrorMessage/> : null,\n          spinner = loading && !error ? <Spinner/> : null,\n          content = !(error || loading || !char) ? <View char={char}/> : null;\n              \n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, homepage, wiki, comics} = char;\n    let {thumbnail} = char;\n    let clazz = 'randomchar__img';\n    thumbnail = thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif' ? 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' : thumbnail;\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' || 'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif') clazz = 'char__not_img';\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} className={clazz}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    // eslint-disable-next-line\n                    comics.map((item, i) => {\n                        if (i < 10) {\n                            return (\n                                <li className=\"char__comics-item\" key={i}>\n                                    <Link to={item.resourceURI.match(/comics\\/\\d*/gm)[0]}>{item.name}</Link>\n                                </li>\n                            );\n                        }\n                    })\n                }\n            </ul>\n        </>\n    );\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.b6739a8d.png\";","import { useState } from \"react\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState( null);\n\n    const onSelectedChar = (id) => {\n        setChar(id);\n    }\n\n    return (\n        <>\n        <ErrorBoundary>\n            <RandomChar/>\n        </ErrorBoundary>\n        <div className=\"char__content\">\n            <ErrorBoundary>\n                <CharList onSelectedChar={onSelectedChar}/>\n            </ErrorBoundary>\n            <ErrorBoundary>\n                <CharInfo charId={selectedChar}/>\n            </ErrorBoundary>\n        </div>\n        <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    );\n}\n\nexport default MainPage;"],"sourceRoot":""}