{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js","components/pages/SingleComicPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useMarvelService","_apiBase","_apiKey","getAllCharacters","a","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComic","getComic","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","comic","title","pages","pageCount","language","textObjects","prices","price","View","navigate","useNavigate","className","onClick","SingleComicPage","comicId","useParams","setComic","useEffect","updateChar","then","onCharLoaded","errorMessage","spinner","content"],"mappings":"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","file":"static/js/5.d659ba6b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'/>\n    );\n}\n\nexport default ErrorMessage;","import { useState, useCallback } from \"react\";\n\nconst useHttp = () => {\n    const [loading, setLoading] = useState(false),\n          [error, setError] = useState(null),\n          request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n            setLoading(true);\n\n            try {\n                const response = await fetch(url, {method, body, headers});\n\n                if (!response.ok) {\n                    throw new Error(`Could not fetch ${url}, status ${response.status}`);\n                }\n\n                const data = await response.json();\n\n                setLoading(false);\n\n                return data;\n            } catch (err) {\n                setLoading(false);\n                setError(err.message);\n                throw err;\n            }\n          }, []);\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, error, request, clearError};\n};\n\nexport default useHttp;","import useHttp from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, error, request, clearError} = useHttp(),\n          _apiBase = 'https://gateway.marvel.com:443/v1/public/',\n          _apiKey = 'apikey=5c02a0353f46ffbe06fcfc4be6d97d44',\n          _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComic);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComic(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        };\n    }\n\n    const _transformComic = (comic) => {\n        return {\n            id: comic.id,\n            title: comic.title,\n            description: comic.description,\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\n            pages: comic.pageCount,\n            language: comic.textObjects[0] ? comic.textObjects[0].language : null,\n            prices: comic.prices.price\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic};\n} \n\nexport default useMarvelService;","import { useParams, Link, useNavigate } from 'react-router-dom';\nimport {useState, useEffect} from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport useMarvelService from '../../services/MarvelService';\nimport '../../style/singleComicPage.scss';\n\nconst SingleComicPage = () => {\n    const {comicId} = useParams(),\n          [comic, setComic] = useState(null),\n          {loading, error, getComic, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [comicId])\n\n    const updateChar = () => {\n        clearError();\n        getComic(comicId).then(onCharLoaded);\n    }\n\n    const onCharLoaded = (comic) => {\n        setComic(comic);\n    }\n    \n    const errorMessage = error ? <ErrorMessage/> : null,\n          spinner = loading && !error ? <Spinner/> : null,\n          content = !(error || loading || !comic) ? <View comic={comic}/> : null;\n\n    return (\n        <>\n            {errorMessage}\n            {spinner}\n            {content}\n        </>\n    )\n}\n\nconst View = ({comic}) => {\n    const {title, description, thumbnail, pages, language, price} = comic,\n          navigate = useNavigate();\n\n    return (\n        <div className=\"single-comic\">\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\n            <div className=\"single-comic__info\">\n                <h2 className=\"single-comic__name\">{title}</h2>\n                <p className=\"single-comic__descr\">{description}</p>\n                <p className=\"single-comic__descr\">{pages}</p>\n                <p className=\"single-comic__descr\">{language}</p>\n                <div className=\"single-comic__price\">{price}</div>\n            </div>\n            <button onClick={() => navigate(-1)} className=\"single-comic__back\">Back</button>\n        </div>\n    );\n}\n\nexport default SingleComicPage;"],"sourceRoot":""}